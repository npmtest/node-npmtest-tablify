{"/home/travis/build/npmtest/node-npmtest-tablify/test.js":"/* istanbul instrument in package npmtest_tablify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-tablify/lib.npmtest_tablify.js":"/* istanbul instrument in package npmtest_tablify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_tablify = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_tablify = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-tablify/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-tablify && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_tablify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_tablify\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_tablify.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_tablify.rollup.js'] =\n            local.assetsDict['/assets.npmtest_tablify.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_tablify.__dirname +\n                    '/lib.npmtest_tablify.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-tablify/node_modules/tablify/lib/tablify.js":"// Generated by CoffeeScript 1.7.1\n(function() {\n  var exports, isArrayOfArrays, printer;\n\n  exports = module.exports = function(arr, opts) {\n    if ((typeof arr) === 'object') {\n      if (!Array.isArray(arr)) {\n        return exports.tablifySingleDict(arr, opts);\n      } else if (isArrayOfArrays(arr)) {\n        return exports.tablifyArrays(arr, opts);\n      } else {\n        return exports.tablifyDicts(arr, opts);\n      }\n    } else {\n      throw new Error('tablify cannot handle non-objects');\n    }\n  };\n\n  exports.tablify = exports;\n\n  exports.tablifySingleDict = function(o, opts) {\n    var arr, k, v;\n    arr = [];\n    for (k in o) {\n      v = o[k];\n      arr.push([k, v]);\n    }\n    arr.sort(function(r1, r2) {\n      return r1[0].localeCompare(r2[0]);\n    });\n    return exports.tablifyArrays(arr, opts);\n  };\n\n  exports.tablifyArrays = function(arr, opts) {\n    var c, row, _i, _len;\n    c = new printer(opts);\n    for (_i = 0, _len = arr.length; _i < _len; _i++) {\n      row = arr[_i];\n      c.push(row);\n    }\n    return c.stringify();\n  };\n\n  exports.tablifyDicts = function(arr, opts) {\n\n    /*\n    takes an array of dictionaries that may have different keys\n     */\n    var c, dict, i, k, known_keys, row, _i, _j, _k, _len, _len1, _len2, _ref;\n    opts = opts || {};\n    if (opts.has_header == null) {\n      opts.has_header = true;\n    }\n    if (opts.show_index == null) {\n      opts.show_index = true;\n    }\n    if (!opts.keys) {\n      known_keys = {};\n      for (_i = 0, _len = arr.length; _i < _len; _i++) {\n        dict = arr[_i];\n        for (k in dict) {\n          known_keys[k] = true;\n        }\n      }\n      opts.keys = (function() {\n        var _results;\n        _results = [];\n        for (k in known_keys) {\n          _results.push(k);\n        }\n        return _results;\n      })();\n      opts.keys.sort();\n    }\n    c = new printer(opts);\n    if (opts.has_header) {\n      row = (function() {\n        var _j, _len1, _ref, _results;\n        _ref = opts.keys;\n        _results = [];\n        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {\n          k = _ref[_j];\n          _results.push(k);\n        }\n        return _results;\n      })();\n      c.push(row);\n    }\n    for (i = _j = 0, _len1 = arr.length; _j < _len1; i = ++_j) {\n      dict = arr[i];\n      row = [];\n      _ref = opts.keys;\n      for (_k = 0, _len2 = _ref.length; _k < _len2; _k++) {\n        k = _ref[_k];\n        row.push((dict[k] != null ? dict[k] : null));\n      }\n      c.push(row);\n    }\n    return c.stringify();\n  };\n\n  printer = (function() {\n    function printer(opts) {\n      this.opts = opts || {};\n      this.opts.spacer = this.opts.spacer != null ? this.opts.spacer : \" | \";\n      this.opts.row_start = this.opts.row_start != null ? this.opts.row_start : \"| \";\n      this.opts.row_end = this.opts.row_end != null ? this.opts.row_end : \" |\";\n      this.opts.row_sep_char = this.opts.row_sep_char != null ? this.opts.row_sep_char : \"-\";\n      this.opts.has_header = this.opts.has_header != null ? this.opts.has_header : false;\n      this.opts.show_index = this.opts.show_index != null ? this.opts.show_index : false;\n      this.rows = [];\n      this.col_widths = [];\n      if (this.opts.border === false) {\n        opts.spacer = ' ';\n        this.opts.row_start = this.opts.row_end = this.opts.row_sep_char = '';\n      }\n    }\n\n    printer.prototype.push = function(row_to_push) {\n      var cell, i, row, row_num, _i, _len, _results;\n      row = (function() {\n        var _i, _len, _results;\n        _results = [];\n        for (_i = 0, _len = row_to_push.length; _i < _len; _i++) {\n          cell = row_to_push[_i];\n          _results.push(cell);\n        }\n        return _results;\n      })();\n      if (this.opts.show_index) {\n        row_num = this.rows.length;\n        if (this.opts.has_header) {\n          row_num--;\n        }\n        if (row_num < 0) {\n          row.splice(0, 0, \"#\");\n        } else {\n          row.splice(0, 0, row_num);\n        }\n      }\n      this.rows.push(row);\n      _results = [];\n      for (i = _i = 0, _len = row.length; _i < _len; i = ++_i) {\n        cell = row[i];\n        if ((this.col_widths[i] == null) || (this.col_widths[i] < this.len(cell))) {\n          _results.push(this.col_widths[i] = this.len(cell));\n        } else {\n          _results.push(void 0);\n        }\n      }\n      return _results;\n    };\n\n    printer.prototype.stringify = function() {\n      var i, j, line, row, strs, total_width, width, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;\n      strs = [];\n      total_width = this.opts.row_start.length + this.opts.row_end.length;\n      _ref = this.col_widths;\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        width = _ref[_i];\n        total_width += width;\n      }\n      total_width += this.opts.spacer.length * (this.col_widths.length - 1);\n      if (this.opts.row_sep_char.length) {\n        strs.push(this.chars(this.opts.row_sep_char, total_width));\n      }\n      _ref1 = this.rows;\n      for (j = _j = 0, _len1 = _ref1.length; _j < _len1; j = ++_j) {\n        row = _ref1[j];\n        line = this.opts.row_start;\n        _ref2 = this.col_widths;\n        for (i = _k = 0, _len2 = _ref2.length; _k < _len2; i = ++_k) {\n          width = _ref2[i];\n          line += this.ljust((row[i] != null ? row[i] : \"\"), width);\n          if (i < this.col_widths.length - 1) {\n            line += this.opts.spacer;\n          }\n        }\n        line += this.opts.row_end;\n        strs.push(line);\n        if (this.opts.row_sep_char) {\n          if ((j === 0) && this.opts.has_header) {\n            strs.push(this.chars(this.opts.row_sep_char, total_width));\n          }\n        }\n      }\n      if (this.opts.row_sep_char.length) {\n        strs.push(this.chars(this.opts.row_sep_char, total_width));\n      }\n      return strs.join(\"\\n\");\n    };\n\n    printer.prototype.toStr = function(o) {\n      var e;\n      if (o === null) {\n        return \"null\";\n      } else if ((typeof o) === \"undefined\") {\n        return \"\";\n      } else if ((typeof o) === \"object\") {\n        try {\n          return JSON.stringify(o);\n        } catch (_error) {\n          e = _error;\n          return \"[\" + e.message + \"]\";\n        }\n      } else {\n        return o.toString();\n      }\n    };\n\n    printer.prototype.len = function(o) {\n      return this.toStr(o).length;\n    };\n\n    printer.prototype.chars = function(c, num) {\n      var i;\n      return ((function() {\n        var _i, _results;\n        _results = [];\n        for (i = _i = 0; 0 <= num ? _i < num : _i > num; i = 0 <= num ? ++_i : --_i) {\n          _results.push(c);\n        }\n        return _results;\n      })()).join(\"\");\n    };\n\n    printer.prototype.ljust = function(o, num) {\n      return \"\" + (this.toStr(o)) + (this.chars(' ', num - this.len(o)));\n    };\n\n    printer.prototype.rjust = function(o, num) {\n      return \"\" + (this.chars(' ', num - this.len(o))) + (this.toStr(o));\n    };\n\n    return printer;\n\n  })();\n\n  isArrayOfArrays = function(arr) {\n    var x, _i, _len;\n    for (_i = 0, _len = arr.length; _i < _len; _i++) {\n      x = arr[_i];\n      if (!(Array.isArray(x))) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n}).call(this);\n"}